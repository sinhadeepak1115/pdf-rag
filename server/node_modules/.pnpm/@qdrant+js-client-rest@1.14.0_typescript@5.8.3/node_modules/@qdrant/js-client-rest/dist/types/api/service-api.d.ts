import { TypedFetch } from '@qdrant/openapi-typescript-fetch';
import { Client } from '../api-client.js';
import { components } from '../openapi/generated_schema.js';
export type ServiceApi = {
    getLocks: TypedFetch<{
        responses: {
            200: {
                content: {
                    'application/json': {
                        usage?: components['schemas']['HardwareUsage'] | (Record<string, unknown> | null);
                        time?: number;
                        status?: string;
                        result?: components['schemas']['LocksOption'];
                    };
                };
            };
            default: {
                content: {
                    'application/json': components['schemas']['ErrorResponse'];
                };
            };
            '4XX': {
                content: {
                    'application/json': components['schemas']['ErrorResponse'];
                };
            };
        };
    }>;
    metrics: TypedFetch<{
        parameters: {
            query?: {
                anonymize?: boolean;
            };
        };
        responses: {
            200: {
                content: {
                    'text/plain': string;
                };
            };
            '4XX': never;
        };
    }>;
    postLocks: TypedFetch<{
        requestBody?: {
            content: {
                'application/json': components['schemas']['LocksOption'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        usage?: components['schemas']['HardwareUsage'] | (Record<string, unknown> | null);
                        time?: number;
                        status?: string;
                        result?: components['schemas']['LocksOption'];
                    };
                };
            };
            default: {
                content: {
                    'application/json': components['schemas']['ErrorResponse'];
                };
            };
            '4XX': {
                content: {
                    'application/json': components['schemas']['ErrorResponse'];
                };
            };
        };
    }>;
    telemetry: TypedFetch<{
        parameters: {
            query?: {
                anonymize?: boolean;
                details_level?: number;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        usage?: components['schemas']['HardwareUsage'] | (Record<string, unknown> | null);
                        time?: number;
                        status?: string;
                        result?: components['schemas']['TelemetryData'];
                    };
                };
            };
            default: {
                content: {
                    'application/json': components['schemas']['ErrorResponse'];
                };
            };
            '4XX': {
                content: {
                    'application/json': components['schemas']['ErrorResponse'];
                };
            };
        };
    }>;
    healthz: TypedFetch<{
        responses: {
            200: {
                content: {
                    'text/plain': string;
                };
            };
            '4XX': never;
        };
    }>;
    livez: TypedFetch<{
        responses: {
            200: {
                content: {
                    'text/plain': string;
                };
            };
            '4XX': never;
        };
    }>;
    readyz: TypedFetch<{
        responses: {
            200: {
                content: {
                    'text/plain': string;
                };
            };
            '4XX': never;
        };
    }>;
    root: TypedFetch<{
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['VersionInfo'];
                };
            };
            '4XX': never;
        };
    }>;
    getIssues: TypedFetch<{
        responses: {
            200: {
                content: {
                    'application/json': Record<string, never>;
                };
            };
            '4XX': never;
        };
    }>;
    clearIssues: TypedFetch<{
        responses: {
            200: {
                content: {
                    'application/json': boolean;
                };
            };
            '4XX': never;
        };
    }>;
};
export declare function createServiceApi(client: Client): ServiceApi;
